#include <iostream>
#include <unordered_map>
#include <vector>

int main() {
    // Инициализация
    int N=-1;
    std::unordered_map<int, std::vector<int>> birds;
    std::cin >> N;

    int buff1, buff2;
    for (int i = 0; i < N; i++) {
        std::cin >> buff1 >> buff2;
        birds[buff1].push_back(buff2);
    }

    // Тело
    /*
    Легендарное однострочка из питона. Алгоритм такой:
    Если сбитая птица сбивает всех птиц строго под ней, то это можно трактовать след. образом:
        Сбитая точка (x_i; y_max) стирает весь столбец x_i
    А значит можно сделать проход по всем непустым x_i (т.е. в которых существует хотя бы 1 y_j) и удалить эти столбцы
    Можно не удалять, а просто посчитать их. То есть посчитать кол-во ключей в мапе.
    Мапа без порядка, т.к. так получается быстрее, а порядок нас не интересует.
    */
    std::cout << birds.size();

    return 0;
}